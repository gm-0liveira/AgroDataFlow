version: "3.8"

services:

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - airflow

  airflow-webserver:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.airflow
    entrypoint: /entrypoint.sh
    command: webserver
    restart: always
    ports:
      - "8082:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__WEBSERVER__SECRET_KEY: your_secret_key
      AIRFLOW__CORE__FERNET_KEY: fgt5JoGOEyDfNKYY40BipFMIzVk6-JUM0C_vzYlbGfM=
    depends_on:
      - postgres
    volumes:
      - ./dags:/opt/airflow/dags
      - ./airflow/entrypoint.sh:/entrypoint.sh
    networks:
      - airflow

  airflow-scheduler:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.airflow
    entrypoint: /entrypoint.sh
    command: scheduler
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: fgt5JoGOEyDfNKYY40BipFMIzVk6-JUM0C_vzYlbGfM=
    depends_on:
      - postgres
    volumes:
      - ./dags:/opt/airflow/dags
      - ./airflow/entrypoint.sh:/entrypoint.sh
    networks:
      - airflow

  spark-master:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.spark
    container_name: spark-master
    command: start-spark master
    ports:
      - "7077:7077"
      - "8080:8080"
    networks:
      - airflow

  spark-worker:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.spark
    depends_on:
      - spark-master
    container_name: spark-worker
    command: start-spark worker spark://spark-master:7077
    ports:
      - "8081:8081"
    networks:
      - airflow

  # Opcional: MinIO (S3 compat√≠vel)
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - ./minio_data:/data
    networks:
      - airflow

volumes:
  pgdata:

networks:
  airflow:
    driver: bridge
